<script type="text/javascript">
//<![CDATA[

Ext.onReady(function(){
    perPage = 25

    // the column model has information about grid columns
    // dataIndex maps the column to the specific data field in
    // the data store (created below)
    var cm = new Ext.grid.ColumnModel([{
           id: 'id',
           header: "<%= I18n.t('permissions.login') %>",
           dataIndex: 'user_login',
           width: 150
        },{
           header: "<%= I18n.t('permissions.role') %>",
           dataIndex: 'name',
           width: 150
        },{
           header: "<%= I18n.t('permissions.item') %>",
           dataIndex: 'node_title',
           width: 'auto'
        }
    ]);

    // by default columns are sortable
    cm.defaultSortable = true;

    // create the Data Store
    var store = new Ext.data.Store({
        proxy: new Ext.data.HttpProxy({
          url: '/admin/permissions.json',
          method: 'GET'
        }),

        remoteSort: true,

        reader: new Ext.data.JsonReader({
          root: 'permissions',
          id: 'id',
          totalProperty: 'total_count'
        }, 
          [ 'name', 'node_title', 'user_login' ]
        ),
        
        autoLoad: {params: {start: 0, limit: perPage}}
    });

    // create the grid
    grid = new Ext.grid.EditorGridPanel({
        store: store,
        cm: cm,
        stripeRows: true,
        autoExpandColumn: 0,
        clicksToEdit: 2,
        margins: '0 5 5 5',
        selModel: new Ext.grid.RowSelectionModel({singleSelect:false}),

        bbar: new Ext.PagingToolbar({
            store: store,
            pageSize: perPage,
            displayInfo: true,
            displayMsg: '<%= I18n.t("permissions.count_msg") %>',
            emptyMsg: '<%= I18n.t("permissions.empty_msg") %>',
            afterPageText: '<%= I18n.t("permissions.of_page") %>',
            beforePageText: '<%= I18n.t("permissions.page") %>'
        }),
        tbar: [
              {
                  text: '<%= I18n.t("permissions.delete") %>',
                  tooltip: '<%= I18n.t("permissions.del_tooltip") %>',
                  handler: handleDelete,
                  iconCls: 'menu_item_delete'
              }
          ]
    });

    function handleDelete(deleteEvent) {
        var selectedItems = grid.selModel.getSelections();
        if (selectedItems.length > 0)
        {
            Ext.MessageBox.confirm('<%= I18n.t("permissions.message") %>','<%= I18n.t("permissions.confirm_deletion") %>', deleteRecord);
        }
        else
        {
            Ext.MessageBox.alert('<%= I18n.t("permissions.message") %>','<%= I18n.t("permissions.select_one") %>');
        }
    }

    function deleteRecord(button) {
        if (button == 'yes')
        {
            var selectedRows = grid.selModel.getSelections();
            selectedRows.each(function(item) {

                Ext.Ajax.request({
                    waitMsg: '<%= I18n.t("permissions.deleting") %>',
                    url: 'permissions/' + item.id + '.json',
                    method: 'POST',

                    params: "_method=delete&authenticity_token=<%= form_authenticity_token -%>",
                    callback: function(options, success, response){
                      if(!success){
                          Ext.ux.alertResponseError(response)
                      }else{
                          store.reload();
                      }
                    }
                });
            });
        }
    };
    
    initViewport(grid);
});

//]]>
</script>
