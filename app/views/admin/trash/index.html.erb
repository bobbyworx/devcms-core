<script type="text/javascript">
//<![CDATA[

Ext.onReady(function(){
    perPage = 25

    Ext.QuickTips.init();

    // shorthand alias
    var fm = Ext.form;

    // the column model has information about grid columns
    // dataIndex maps the column to the specific data field in
    // the data store (created below)
    var cm = new Ext.grid.ColumnModel({
      columns: 
        [{
             id: 'id',
             header: "<%= I18n.t('trash.title') %>",
             dataIndex: 'title',
             width: 350,
             sortable: true
         },{
            header: "<%= I18n.t('trash.content_type') %>",
            dataIndex: 'content_type',
            width: 200,
            sortable: true
          },{
             header: "<%= I18n.t('trash.path') %>",
             dataIndex: 'path',
             width: 400,
             sortable: false
          },{
             header: "<%= I18n.t('trash.deleted_at') %>",
             dataIndex: 'deleted_at',
             width: 200,
             sortable: true
          }
      ]
    });

    // by default columns are sortable
    cm.defaultSortable = true;

    // create the Data Store
    var store = new Ext.data.Store({
        proxy: new Ext.data.HttpProxy({
          url: '/admin/trash.json',
          method: 'GET'
        }),

        remoteSort: true,

        reader: new Ext.data.JsonReader({
          root: 'trash_items',
          id: 'id',
          totalProperty: 'total_count'
        },
          [ 'title', 'content_type', 'path', 'deleted_at' ]
        ),

        autoLoad: {params: {start: 0, limit: perPage}}
    });

    // create the grid
    grid = new Ext.grid.GridPanel({
        store: store,
        cm: cm,
        stripeRows: true,
        autoExpandColumn: 0,
        margins: '0 5 5 5',
        selModel: new Ext.grid.RowSelectionModel({singleSelect: true}),
        loadMask: true,
        bbar: new Ext.PagingToolbar({
            store: store,
            pageSize: perPage,
            displayInfo: true,
            displayMsg: '<%= I18n.t("trash.count_msg") %>',
            emptyMsg: '<%= I18n.t("trash.empty_msg") %>',
            afterPageText: '<%= I18n.t("trash.of_page") %>',
            beforePageText: '<%= I18n.t("trash.page") %>'
        }),
        tbar: [
              {
                  text: '<%= I18n.t("trash.restore") %>',
                  tooltip: '<%= I18n.t("trash.restore_tooltip") %>',
                  handler: handleRestore,
                  iconCls:'menu_item_approve'
              },
              {
                  text: '<%= I18n.t("trash.clear") %>',
                  tooltip: '<%= I18n.t("trash.clear_tooltip") %>',
                  handler: handleClear,
                  iconCls:'menu_item_delete'
              }
        ]
    });
    
    function handleRestore(restoreEvent) {
        grid.disable();
        var selectedItems = grid.selModel.getSelections();
        if (selectedItems.length > 0)
        {
            Ext.MessageBox.confirm('<%= I18n.t("trash.message") %>','<%= I18n.t("trash.confirm_restoration") %>', restoreRecord);
        }
        else
        {
            Ext.MessageBox.alert('<%= I18n.t("trash.message") %>','<%= I18n.t("trash.select_one") %>');
            grid.enable();
        }
    }
    
    function restoreRecord(button) {
        if (button == 'yes')
        {
            var selectedRow = grid.selModel.getSelected();
            
            Ext.Ajax.request({
              url: 'trash/restore/' + selectedRow.id + '.json',
              method: 'POST',
              params: "_method=put&authenticity_token=<%= form_authenticity_token -%>",
              
              callback: function(options, success, response){
                if (!success) {
                  Ext.ux.alertResponseError(response);
                  store.reload();
                  grid.enable();
                } else {
                  store.reload();
                  grid.enable();
                }
              }
          });
        } else {
          grid.enable();
        }
    };
    
    function handleClear(clearEvent) {
      grid.disable();
      Ext.MessageBox.confirm('<%= I18n.t("trash.message") %>','<%= I18n.t("trash.confirm_clear") %>', clearTrash);
    }
    
    function clearTrash(button) {
        if (button == 'yes')
        {
            grid.disable();
            Ext.Ajax.request({
              url: 'trash/clear.json',
              method: 'POST',
              params: "_method=delete&authenticity_token=<%= form_authenticity_token -%>",
              
              callback: function(options, success, response){
                if (!success) {
                    Ext.ux.alertResponseError(response)
                    store.reload();
                    grid.enable();
                } else {
                    store.reload();
                    grid.enable();
                }
              }
          });
        } else {
          grid.enable();
        }
    };
  
    initViewport(grid);
});

//]]>
</script>
