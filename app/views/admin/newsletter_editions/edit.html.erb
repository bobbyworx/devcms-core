<div id="right_panel_form"></div>

<script type="text/javascript">
//<![CDATA
Ext.QuickTips.init();

var newsletterEditionForm = new Ext.dvtr.ContentNodeFormPanel({
  labelWidth: 110,
  title: '<%= I18n.t("newsletters.edit_edition") %> \'<%= escape_javascript @newsletter_edition.title -%>\'',
  bodyStyle: 'padding:10px',
  labelPad: 10,
  border: false,
  monitorValid: true,
  defaults: {
    msgTarget: 'side'
  }
});

<%= render :partial => 'fields' -%>
<%= render :partial => 'items_col' -%>

newsletterEditionForm.addButton({
  text: '<%= I18n.t("shared.preview") -%>',
  formBind: true,
  handler: function () {
    resetTinyMCE();
    var items_array = new Array();
    if (newsItemCol.items != null) newsItemCol.items.each(function (item, index, length) { items_array.push(item.id); });

    var customParams = Ext.apply(
      newsletterEditionForm.getForm().getValues(), {
        format: 'html',
        commit_type: 'preview',
        for_approval: '<%= @for_approval -%>',
        _method: 'put'
      }
    );

    if (items_array.length > 0) customParams = Ext.apply(customParams, { 'items[]': items_array });

    rightPanel.load({
      url: '<%= admin_newsletter_edition_url(@newsletter_edition) -%>',
      method: 'POST',
      params: Ext.ux.prepareParams(defaultParams, customParams),
      callback: function (options, success, response) {
        if (!success) {
          Ext.ux.alertResponseError(response, '<%= I18n.t("newsletters.edition_failed") -%>')
        }
      }
    });
  } // end handler
});

newsletterEditionForm.addButton({
  text: '<%= I18n.t("shared.save") -%>',
  formBind: true,
  handler: function () {
    resetTinyMCE();
    var items_array = new Array();
    if (newsItemCol.items != null) newsItemCol.items.each(function (item, index, length) { items_array.push(item.id); });

    var customParams = Ext.apply(
      newsletterEditionForm.getForm().getValues(),{
        format: 'html',
        commit_type: 'save',
        for_approval: '<%= @for_approval -%>',
        _method: 'put'
      }
    );

    if (items_array.length > 0) customParams = Ext.apply(customParams, { 'items[]': items_array });

    rightPanel.load({
      url: '<%= admin_newsletter_edition_url(@newsletter_edition) -%>',
      method: 'POST',
      params: Ext.ux.prepareParams(defaultParams, customParams),
      callback: function (options, success, response) {
        if (!success) {
          Ext.ux.alertResponseError(response, '<%= I18n.t("newsletters.edition_failed") -%>')
        }
      }
    });
  } // end handler
});

// Show validation errors and handle marking of invalid fields.
var errors = <%= @newsletter_edition.errors.to_json %>;
if (errors.length > 0) {
  newsletterEditionForm.insertErrorMessages('<%= error_messages_for :newsletter_edition %>', '<%= @newsletter_edition.class.to_s.underscore -%>');
}

newsletterEditionForm.render('right_panel_form');

// Load the content upon expanding the panel
onBeforeExpand = function (e) {
  e.showSpinner(); // Show 'loading' spinner while waiting for a server response
  e.load({
    url: e.controllerName + '/' + e.contentNodeId,
    params: Ext.ux.prepareParams(defaultParams, { show_actions: false, format: 'html' }),
    method: 'GET',
    callback: function (options, success, response) {
      if (!success)
        Ext.ux.alertResponseError(response, '<%= I18n.t("newsletters.form_load_error") -%>')
      e.hideSpinner();
      // Assign the ID of the item to the sortlet
      e.assignId(e.nodeId);
    }
  });
  return true;
}

// Show the collapse button of every item
if (newsItemCol.items) {
  newsItemCol.items.each( function (item, index, len) {
    item.on('beforeexpand', onBeforeExpand);
    item.showCollapse();
  });
}

//]]>
</script>
