<script type="text/javascript">
//<![CDATA[

Ext.onReady(function(){
    perPage = 25

    Ext.QuickTips.init();

    // shorthand alias
    var fm = Ext.form;

    // the column model has information about grid columns
    // dataIndex maps the column to the specific data field in
    // the data store (created below)
    var cm = new Ext.grid.ColumnModel([{
           id: 'id',
           header: "<%= I18n.t('abbreviations.abbr') %>",
           dataIndex: 'abbr',
           width: 75,
           editor: new fm.TextField()
        },{
           header: "<%= I18n.t('abbreviations.definition') %>",
           dataIndex: 'definition',
           width: 250,
           editor: new fm.TextField()
        }
    ]);

    // by default columns are sortable
    cm.defaultSortable = true;

    // create the Data Store
    var store = new Ext.data.Store({
        proxy: new Ext.data.HttpProxy({
          url: "/admin/abbreviations.json?node_id=<%= @node.id -%>",
          method: 'GET'
        }),

        remoteSort: true,

        reader: new Ext.data.JsonReader({
          root: 'abbreviations',
          id: 'id',
          totalProperty: 'total_count'
        },
          [ 'abbr', 'definition' ]
        ),

        autoLoad: {params: {start: 0, limit: perPage}}
    });

    // create the grid
    var grid = new Ext.grid.EditorGridPanel({
        renderTo: 'abbreviations-panel',
        store: store,
        cm: cm,
        stripeRows: true,
        autoExpandColumn: 0,
        clicksToEdit: 2,
        border: false,
        width: '100%',
        height: 500,
        selModel: new Ext.grid.RowSelectionModel({singleSelect:false}),

        bbar: new Ext.PagingToolbar({
            store: store,
            pageSize: perPage,
            displayInfo: true,
            displayMsg: '<%= I18n.t("abbreviations.count_msg") %>',
            emptyMsg: '<%= I18n.t("abbreviations.empty_msg") %>',
            afterPageText: '<%= I18n.t("abbreviations.of_page") %>',
            beforePageText: '<%= I18n.t("abbreviations.page") %>'
        }),
        tbar: [
              {
                  text: '<%= I18n.t("abbreviations.new") %>',
                  tooltip: '<%= I18n.t("abbreviations.new_tooltip") %>',
                  handler: handleCreate,
                  iconCls: 'menu_item_create'
              },{
                  text: '<%= I18n.t("abbreviations.delete") %>',
                  tooltip: '<%= I18n.t("abbreviations.del_tooltip") %>',
                  handler: handleDelete,
                  iconCls: 'menu_item_delete'
              }
          ],
        listeners:{
            'afteredit': handleEdit
        }
    });

    function handleDelete(deleteEvent) {
        var selectedItems = grid.selModel.getSelections();
        if (selectedItems.length > 0)
        {
            Ext.MessageBox.confirm('<%= I18n.t("abbreviations.message") %>','<%= I18n.t("abbreviations.confirm_deletion") %>', deleteRecord);
        }
        else
        {
            Ext.MessageBox.alert('<%= I18n.t("abbreviations.message") %>','<%= I18n.t("abbreviations.select_one") %>');
        }
    }

    function deleteRecord(button) {
        if (button == 'yes')
        {
            var selectedRows = grid.selModel.getSelections();
            selectedRows.each(function(item) {

                Ext.Ajax.request({
                    waitMsg: '<%= I18n.t("abbreviations.deleting") %>',
                    url: 'abbreviations/' + item.id + '.json',
                    method: 'POST',
                    headers: { 'X-CSRF-Token': '<%= form_authenticity_token.to_s %>' },
                    params: "_method=delete" +
                            "&node_id=<%= @node.id -%>",
                    callback: function(options, success, response){
                      if(!success){
                          Ext.ux.alertResponseError(response)
                      }else{
                          store.reload();
                      }
                    }
                });
            });
        }
    };

    function handleEdit(editEvent) {
        Ext.Ajax.request({
            waitMsg: '<%= I18n.t("abbreviations.saving") %>',
            url: 'abbreviations/' + editEvent.record.id + '.json',
            method: 'POST',
            headers: { 'X-CSRF-Token': '<%= form_authenticity_token.to_s %>' },
            params: "_method=put" +
                    "&node_id=<%= @node.id -%>" +
                    "&abbreviation[" + editEvent.field + "]=" + editEvent.value,

            failure: function(response,options) {
                Ext.MessageBox.alert('<%= I18n.t("abbreviations.error") %>','<%= I18n.t("abbreviations.could_not_save") %>');
            },
            success: function(response,options) {
                store.commitChanges();
            }
        });
    }

    function handleCreate(createEvent) {
        wnd = new Ext.Window({
            animateTarget: createEvent.getEl(),
            modal: true,
            layout: 'fit',
            height: 152,
            width: 300,
            title: '<%= I18n.t("abbreviations.new_abbreviation") %>',
            items: [{
              xtype: 'form',
              itemId: 'new_abbreviation',
              bodyStyle: 'padding:5px',
              items: [{
                  xtype: 'textfield',
                  fieldLabel: '<%= I18n.t("abbreviations.abbr") %>',
                  name: 'abbreviation[abbr]'
              },{
                  xtype: 'textfield',
                  fieldLabel: '<%= I18n.t("abbreviations.definition") %>',
                  name: 'abbreviation[definition]'
              },{
                  xtype: 'hidden',
                  name: 'node_id',
                  value: '<%= @node.id -%>'
              },{
                  xtype: 'hidden',
                  name: 'authenticity_token',
                  value: '<%= form_authenticity_token -%>'
              }]
            }],
            buttonAlign: 'center',
            buttons: [{
                  xtype: 'button',
                  text: '<%= I18n.t("abbreviations.save") %>',
                  type: 'submit',
                  handler: function(e){
                      wnd.getComponent('new_abbreviation').getForm().submit({
                          url: 'abbreviations.json',
                          method: 'POST',
                          failure: function(form,action) {
                              Ext.MessageBox.alert('<%= I18n.t("abbreviations.error") %>',action.response.responseText);
                          },
                          success: function(form,action) {
                              store.reload();
                              wnd.close();
                          }
                      });
                  }
              },{
                  xtype: 'button',
                  text: '<%= I18n.t("abbreviations.cancel") %>',
                  type: 'reset',
                  handler: function(e){
                      wnd.close();
                  }
              }]
        });
        wnd.show();
    }
});

//]]>
</script>

<div id="abbreviations-panel"></div>
