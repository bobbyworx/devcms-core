<script type="text/javascript">
//<![CDATA[

Ext.onReady(function(){
    perPage = 25

    Ext.QuickTips.init();

    // shorthand alias
    var fm = Ext.form;

    // the column model has information about grid columns
    // dataIndex maps the column to the specific data field in
    // the data store (created below)
    var cm = new Ext.grid.ColumnModel([{
           id: 'id',
           header: "<%= I18n.t('settings.key') %>",
           dataIndex: 'key',
           width: 250
        },{
           header: "<%= I18n.t('settings.alt') %>",
           dataIndex: 'alt',
           width: 400
        },{
           header: "<%= I18n.t('settings.value') %>",
           dataIndex: 'value',
           width: 500,         
           editor: new fm.TextField()
        }
    ]);

    // by default columns are sortable
    cm.defaultSortable = true;

    // create the Data Store
    var store = new Ext.data.Store({
        proxy: new Ext.data.HttpProxy({
          url: '/admin/settings.json',
          method: 'GET'
        }),

        remoteSort: true,

        reader: new Ext.data.JsonReader({
          root: 'settings',
          id: 'id',
          totalProperty: 'total_count'
        },
          [ 'key', 'alt', 'value' ]
        ),

        autoLoad: {params: {start: 0, limit: perPage}}
    });

    // create the grid
    grid = new Ext.grid.EditorGridPanel({
        store: store,
        cm: cm,
        stripeRows: true,
        autoExpandColumn: 0,
        clicksToEdit: 2,
        margins: '0 5 5 5',
        selModel: new Ext.grid.RowSelectionModel({singleSelect:false}),

        bbar: new Ext.PagingToolbar({
            store: store,
            pageSize: perPage,
            displayInfo: true,
            displayMsg: '<%= I18n.t("settings.count_msg") %>',
            emptyMsg: '<%= I18n.t("settings.empty_msg") %>',
            afterPageText: '<%= I18n.t("settings.of_page") %>',
            beforePageText: '<%= I18n.t("settings.page") %>'
        }),
        tbar: [],
        listeners:{
            'afteredit': handleEdit
        }
    });

    function handleEdit(editEvent) {
        Ext.Ajax.request({
            waitMsg: '<%= I18n.t("settings.saving") %>',
            url: 'settings/' + editEvent.record.id + '.json',
            method: 'POST',

            params: "_method=put&authenticity_token=<%= form_authenticity_token -%>" +
                    "&setting[" + editEvent.field + "]=" + editEvent.value,

            failure: function(response,options) {
                Ext.MessageBox.alert('<%= I18n.t("settings.error") %>',response.responseText);
            },
            success: function(response,options) {
                store.commitChanges();
            }
        });
    }

    initViewport(grid);
});

//]]>
</script>
