#responsible_user_settings.clearfix
  = field_set_tag t('responsible_user.settings') do
    = wrap_with_label(content_tag(:div, '', :id => 'responsible_user_ct'), { :text => t('shared.responsible_user'), :for => 'responsible_user_field' })
    :javascript
      var userStore = new Ext.data.Store({
        proxy: new Ext.data.HttpProxy({
          url: '#{privileged_admin_users_path(:node => content.node, :format => 'json')}',
          method: 'GET'
        }),
        reader: new Ext.data.JsonReader({
          root: 'users',      
          id: 'id'
        }, [ 'login', 'id' ])
      });
      
      MyCombo = function(config) {
      	MyCombo.superclass.constructor.call(this, config);
      };
      Ext.extend(MyCombo, Ext.form.ComboBox, {
      	listAlignOffsets: [0, 0],
      	// private
          restrictHeight : function(){
              this.innerList.dom.style.height = '';
              var inner = this.innerList.dom;
              var h = Math.max(inner.clientHeight, inner.offsetHeight, inner.scrollHeight);
              this.innerList.setHeight(h < this.maxHeight ? 'auto' : this.maxHeight);
              this.list.beginUpdate();
              this.list.setHeight(this.innerList.getHeight()+this.list.getFrameWidth('tb')+(this.resizable?this.handleHeight:0)+this.assetHeight);
              this.list.alignTo(this.el, this.listAlign, this.listAlignOffsets);
              this.list.endUpdate();
          },
          /**
           * Expands the dropdown list if it is currently hidden. Fires the 'expand' event on completion.
           */
          expand : function(){
              if(this.isExpanded() || !this.hasFocus){
                  return;
              }
              this.list.alignTo(this.el, this.listAlign, this.listAlignOffsets);
              this.list.show();
              Ext.get(document).on('mousedown', this.collapseIf, this);
              this.fireEvent('expand', this);
          }

      });
      

      new MyCombo({
        id: 'responsible_user_combo',
        name: '#{form.object_name}[responsible_user_login]',
        hiddenName: '#{form.object_name}[responsible_user_id]',
        store: userStore,
        valueField: 'id',
        displayField: 'login',
        value: '#{content.responsible_user.try(:login)}',
        hiddenValue: '#{content.responsible_user_id}',
        typeAhead: true,
        hideTrigger: true,
        mode: 'remote',
        minChars: 2,
        listAlign: 'tl-bl',
        listAlignOffsets: [0,0],
        triggerAction: 'all',
        emptyText: '#{I18n.t('permissions.select_a_user')}',
        selectOnFocus: true,
        width: 200,
        listWidth: 200,
        renderTo: 'responsible_user_ct',
        forceSelection: true
      });
    - if content.expirable? || content.expiration_container?
      = form.radio_button :expiration_notification_method, "inherit",          :label => t('shared.inherit')
      = form.radio_button :expiration_notification_method, "email",            :label => t('shared.set_email'), :wrapper => {:style => 'height: 32px;'}
      = form.radio_button :expiration_notification_method, "responsible_user", :label => t('shared.current_responsible_user'), :wrapper => {:style => 'height: 52px;'}
      = form.text_field   :expiration_email_recipient,           :label => t('shared.email')
      - if content.expiration_container?
        = form.date_field :cascade_expires_on, :allow_empty => true, :label => t('shared.cascade_expires_on')
    - if content.expirable?
      - if params[form.object_name] && params[form.object_name][:expires_on]
        - expire_on_value =  params[form.object_name][:expires_on]
      - elsif content.expiration_required?
        - expire_on_value = Settler[:default_expiration_time].days.from_now
      - else
        - expire_on_value = content.expires_on
      = form.date_field :expires_on, :value => expire_on_value, :allow_empty => true, :label => t('shared.expires_on')